/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jahantextail;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author MJIL
 */
public class WeekSetup extends javax.swing.JFrame {

    /**
     * Creates new form WeekSetup
     */
    private String fromDate="";
    private String toDate="";
    private int workHour;
    SimpleDateFormat dateFormat;

    public static Connection connection;
    private int fesHours;

    public WeekSetup() {
        initComponents();
        connection = DbConnect.dbconnect();
        dateFormat=new SimpleDateFormat("MM-dd-yyyy");
        ShowWeekTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        fromDateDc = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        toDateDc = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        workHourTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fesTf = new javax.swing.JTextField();
        runWeekCb = new javax.swing.JCheckBox();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        weeksTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Start Date");

        jLabel2.setText("End Date");

        jLabel3.setText("Mill Running Hours");

        workHourTf.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                workHourTfKeyTyped(evt);
            }
        });

        jLabel5.setText("Festival Hours");

        runWeekCb.setText("Mark as Running Week");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runWeekCb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fesTf, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(workHourTf, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(51, 51, 51))
                            .addComponent(fromDateDc, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toDateDc, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fromDateDc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(toDateDc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(workHourTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fesTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runWeekCb)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        weeksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        weeksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                weeksTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(weeksTable);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Weeks");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnAdd)
                        .addGap(10, 10, 10)
                        .addComponent(btnUpdate)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate))
                .addContainerGap(69, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        insertWeek();

        

    }//GEN-LAST:event_btnAddActionPerformed

    private void workHourTfKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_workHourTfKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_workHourTfKeyTyped

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        updateWeek();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void weeksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_weeksTableMouseClicked
        try {
            // TODO add your handling code here:

            setSelectData();
        } catch (ParseException ex) {
            Logger.getLogger(WeekSetup.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_weeksTableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WeekSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WeekSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WeekSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WeekSetup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new WeekSetup().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField fesTf;
    private com.toedter.calendar.JDateChooser fromDateDc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox runWeekCb;
    private com.toedter.calendar.JDateChooser toDateDc;
    private javax.swing.JTable weeksTable;
    private javax.swing.JTextField workHourTf;
    // End of variables declaration//GEN-END:variables

    private void ShowWeekTable() {
        try {
            String sql_1 = "select from_date, to_date, work_hour, fes_hours from wages_weeks ORDER BY from_date DESC";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs_1 = st.executeQuery();
            weeksTable.setModel(DbUtils.resultSetToTableModel(rs_1));

            st.close();
            rs_1.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void getData() {
        fromDate = dateFormat.format(fromDateDc.getDate());
        toDate = dateFormat.format(toDateDc.getDate());
        if (!(workHourTf.getText().isEmpty())) {
            try {
                workHour = Integer.parseInt(workHourTf.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid Work Hour");
            }
        }
        
        if (!(fesTf.getText().isEmpty())) {
            try {
                fesHours = Integer.parseInt(fesTf.getText());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Invalid festival Hour");
            }
        }
    }

    private void insertWeek() {
        
        getData();
               
        if(fromDate.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter week start date.");
        }else if(toDate.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter week end date.");
        }else if(workHourTf.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter work hour of the week.");
        }
        else{
            try {
                String sql_1 = "select * from wages_weeks where from_date ='" + fromDate + "' "
                        + "and to_date = '"+toDate+"'";
                PreparedStatement st = connection.prepareStatement(sql_1);
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Duplicate Entry.");
                } else {
                    String sql_2 = "insert into wages_weeks"
                            + "(from_date,to_date,work_hour,fes_hours)"
                            + " values(?,?,?,?)";
                    try (PreparedStatement statement = connection.prepareStatement(sql_2)) {
                        statement.setString(1, fromDate);
                        statement.setString(2, toDate);
                        statement.setInt(3, workHour);
                        statement.setInt(4, fesHours);
                        statement.executeUpdate();
                                                                      
                        statement.close();
                    }
                    
                    if(runWeekCb.isSelected()){
                        updateRunningWeek();
                    }
                    
                    initFields();
                    ShowWeekTable();
                }
                st.close();
                rs.close();
            } catch (HeadlessException | SQLException e) {
                e.printStackTrace();
            }
        }
        
        
        
    }

    private void initFields() {
      fromDateDc.setCalendar(null);
      toDateDc.setCalendar(null);
      workHourTf.setText("");
      }

    private void updateRunningWeek() {
        try {
            String sql="select * from running_week";
            PreparedStatement statement=connection.prepareStatement(sql);
            ResultSet rs=statement.executeQuery();
            if(!rs.next()){
                String sql_2 = "insert into running_week"
                            + "(from_date,to_date,work_hour,fes_hours)"
                            + " values(?,?,?,?)";
                   PreparedStatement statement_2=connection.prepareStatement(sql_2);
                   statement_2.setString(1, fromDate);
                   statement_2.setString(2, toDate);
                   statement_2.setInt(3, (int) workHour);
                   statement_2.setInt(4, (int) fesHours);
                   statement_2.executeUpdate();
                
            }else{
                 
            String sql_3 = "update running_week set from_date = '" + fromDate + "',"
                        + "to_date = '" + toDate + "',work_hour='"+workHour+"',"
                    + "fes_hours = '"+fesHours+"'";
            PreparedStatement statement_3 = connection.prepareStatement(sql_3);
            statement_3.executeUpdate();       
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
               
        
    }

    private void setSelectData() throws ParseException {
       
        int row = weeksTable.getSelectedRow();
        String fromDate = weeksTable.getModel().getValueAt(row, 0).toString();
        String toDate = weeksTable.getModel().getValueAt(row, 1).toString();
        Date date = new SimpleDateFormat("MM-dd-yyyy").parse(fromDate);
        Date date2 = new SimpleDateFormat("MM-dd-yyyy").parse(toDate);
        fromDateDc.setDate(date);
        toDateDc.setDate(date2);

        try {

            String sql = "select * from wages_weeks where from_date='" + fromDate + "' and "
                    + "to_date = '" + toDate + "'";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {                
                workHourTf.setText(String.valueOf(rs.getInt("work_hour")));
                fesTf.setText(String.valueOf(rs.getInt("fes_hours")));
            } 

            st.close();
            rs.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
            }

    private void updateWeek() {
        getData();
        
        if(runWeekCb.isSelected()){
            updateRunningWeek();
        }
        
        try {
            String sql="update wages_weeks set work_hour='"+workHour+"',"
                    + "fes_hours = '"+fesHours+"' where from_date='"+fromDate+"' and to_date='"+toDate+"'";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.executeUpdate();  
            ShowWeekTable();
        } catch (Exception e) {
            e.printStackTrace();
        }
            }
}
