/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jahantextail;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author MJIL
 */
public class Employee extends javax.swing.JPanel {

    /**
     * Creates new form Employee
     */
    public static Connection connection;
    private int cardNo;
    private String name;
    private String phone;
    private String address;
    private String gender;
    private String joinningDate;
    private int dailyBasic;
    private String department;
    private String designation;
    private int hrDeduction;
    private SimpleDateFormat dateFormat;
    public Employee() {
        initComponents();
        connection = DbConnect.dbconnect();
        dateFormat=new SimpleDateFormat("dd-MM-yyyy");
        showEmployeeTable();
        departmentItem();
        designationItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cardNoTf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nameTf = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        phoneTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addressTf = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        dailyBasicTf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        maleRadio = new javax.swing.JRadioButton();
        femaleRadio = new javax.swing.JRadioButton();
        joinningDateDc = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        departmentCombo = new javax.swing.JComboBox<>();
        designationCombo = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeeTable = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        hrDedCB = new javax.swing.JCheckBox();
        hrTF = new javax.swing.JTextField();
        hrLBL = new javax.swing.JLabel();

        jLabel1.setText("Card No.");

        cardNoTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardNoTfActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("Phone");

        jLabel4.setText("Address");

        jLabel5.setText("Gender");

        jLabel6.setText("Joinning Date");

        jLabel7.setText("Daily Basic");

        jLabel8.setText("Department");

        jLabel9.setText("Designation");

        genderGroup.add(maleRadio);
        maleRadio.setText("Male");

        genderGroup.add(femaleRadio);
        femaleRadio.setText("Female");

        jLabel10.setText("Tk/Day");

        departmentCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select One" }));

        designationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select One" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(cardNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(phoneTf, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(addressTf, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(dailyBasicTf, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(departmentCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(designationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(maleRadio)
                                .addGap(18, 18, 18)
                                .addComponent(femaleRadio)
                                .addGap(66, 66, 66))
                            .addComponent(joinningDateDc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cardNoTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(phoneTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(addressTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(maleRadio)
                    .addComponent(femaleRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(joinningDateDc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dailyBasicTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(departmentCombo)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(designationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 51)));

        employeeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        employeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeeTable);

        jButton4.setText("Search");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("All Employee");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(0, 141, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hrDedCB.setText("H/Rent Deduction");
        hrDedCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hrDedCBActionPerformed(evt);
            }
        });

        hrTF.setText("10");
        hrTF.setEnabled(false);

        hrLBL.setText("TK");
        hrLBL.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(hrDedCB)
                        .addGap(18, 18, 18)
                        .addComponent(hrTF, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(hrLBL)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hrDedCB)
                            .addComponent(hrTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hrLBL))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        insertEmployee();

    }//GEN-LAST:event_btnAddActionPerformed

    private void hrDedCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hrDedCBActionPerformed
        // TODO add your handling code here:
        
        if(hrDedCB.isSelected()){
            hrTF.setEnabled(true);
             hrLBL.setEnabled(true);
        }else{
            hrTF.setEnabled(false);
             hrLBL.setEnabled(false);
        }
    }//GEN-LAST:event_hrDedCBActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        updateEmployee();
        initFields();
        cardNoTf.requestFocus();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void employeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeTableMouseClicked
        try {
            // TODO add your handling code here:
            int row = employeeTable.getSelectedRow();
        String tableClicked = (employeeTable.getModel().getValueAt(row, 0).toString());
            
            setSelectData(tableClicked);
        } catch (ParseException ex) {
            Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_employeeTableMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        deleteEmployee();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cardNoTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardNoTfActionPerformed
        // TODO add your handling code here:
        String Key=cardNoTf.getText();
        try {
            setSelectData(Key);
        } catch (ParseException ex) {
            Logger.getLogger(Employee.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cardNoTfActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField addressTf;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField cardNoTf;
    private javax.swing.JTextField dailyBasicTf;
    private javax.swing.JComboBox<String> departmentCombo;
    private javax.swing.JComboBox<String> designationCombo;
    private javax.swing.JTable employeeTable;
    private javax.swing.JRadioButton femaleRadio;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JCheckBox hrDedCB;
    private javax.swing.JLabel hrLBL;
    private javax.swing.JTextField hrTF;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField5;
    private com.toedter.calendar.JDateChooser joinningDateDc;
    private javax.swing.JRadioButton maleRadio;
    private javax.swing.JTextField nameTf;
    private javax.swing.JTextField phoneTf;
    // End of variables declaration//GEN-END:variables

    private void getData() {
        try {
            cardNo = Integer.parseInt(cardNoTf.getText());
        } catch (NumberFormatException e) {
            // JOptionPane.showMessageDialog(this, "Enter Valid card No.");
        }
        
        if(hrDedCB.isSelected()){
            hrTF.setEnabled(true);
            hrLBL.setEnabled(true);
            try {
                hrDeduction=Integer.parseInt(hrTF.getText());
            } catch (NumberFormatException e) {
            }
        }else{
             hrTF.setEnabled(false);
             hrLBL.setEnabled(false);
             hrDeduction=0;
        }
        
        name = nameTf.getText();
        phone = phoneTf.getText();
        address = addressTf.getText();
        if (maleRadio.isSelected()) {
            gender = maleRadio.getText();
        } else if (femaleRadio.isSelected()) {
            gender = femaleRadio.getText();
        }
        
        joinningDate = dateFormat.format(joinningDateDc.getDate());
        try {
            dailyBasic = Integer.parseInt(dailyBasicTf.getText());
        } catch (NumberFormatException e) {
        }
        department = departmentCombo.getSelectedItem().toString();
        designation = designationCombo.getSelectedItem().toString();
    }

    private void insertEmployee() {

        getData();
        java.sql.Date sqlJoinDate = null, sqlDesertionDate = null;

        if (cardNo == 0) {
            JOptionPane.showMessageDialog(this, "Please enter valid Card no");
        } else if (name.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter Name");
        } else if (joinningDate == null) {
            JOptionPane.showMessageDialog(this, "Please enter Joining date");
        } else if (department.equals("Select One")) {
            JOptionPane.showMessageDialog(this, "Please Select Department");
        } else if (designation.equals("Select One")) {
            JOptionPane.showMessageDialog(this, "Please Select Designation");
        } else {
            

            try {
                String sql = "select * from employee where card_no='" + cardNo + "'";
                PreparedStatement st = connection.prepareStatement(sql);
                ResultSet rs = st.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(this, "Duplicate Entry.");
                } else {
                    String sql_1 = "insert into employee"
                            + "(card_no,name,address,phone,gender,department,designation,"
                            + "d_basic,joinning_date,hr_deductiom)"
                            + " values(?,?,?,?,?,?,?,?,?,?)";
                    try (PreparedStatement statement = connection.prepareStatement(sql_1)) {
                        statement.setInt(1, cardNo);
                        statement.setString(2, name);
                        statement.setString(3, address);
                        statement.setString(4, phone);
                        statement.setString(5, gender);
                        statement.setString(6, department);
                        statement.setString(7, designation);
                        statement.setInt(8, dailyBasic);
                        statement.setString(9, joinningDate);
                        statement.setInt(10, hrDeduction);
                        
                        statement.executeUpdate();
                        statement.close();
                    }

                    showEmployeeTable();
                    initFields();
                }
                st.close();
                rs.close();
            } catch (HeadlessException | SQLException e) {
                JOptionPane.showMessageDialog(this, "Error!!! Process Failed.");
            }

        }
    }

    private void showEmployeeTable() {
        try {
            String sql_1 = "select card_no,name,department from employee ORDER BY department";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs_1 = st.executeQuery();
            employeeTable.setModel(DbUtils.resultSetToTableModel(rs_1));

            st.close();
            rs_1.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }

    private void departmentItem() {
        try {

            String sql_1 = "select * from department";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                departmentCombo.addItem(rs.getString("name"));
            }
            st.close();
            rs.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void designationItem() {
        try {
            String sql_1 = "select * from designation";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs = st.executeQuery();

            while (rs.next()) {
                designationCombo.addItem(rs.getString("name"));
            }
            st.close();
            rs.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }

    private void initFields() {
        cardNo = 0;
        name = "";
        phone = "";
        address = "";
        gender = "";
        joinningDate = null;
        dailyBasic = 0;
        department = "";
        designation = "";
        
        cardNoTf.setText("");
        nameTf.setText("");
        phoneTf.setText("");
        addressTf.setText("");
        joinningDateDc.setCalendar(null);
        dailyBasicTf.setText("");
        departmentCombo.setSelectedIndex(0);
        designationCombo.setSelectedIndex(0);

    }

    private void setSelectedItem() {
        
                int row = employeeTable.getSelectedRow();
        String tableClicked = (employeeTable.getModel().getValueAt(row, 0).toString());

        try {

            String sql = "select * from employee where card_no='" + tableClicked + "'";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                cardNoTf.setText(String.valueOf(rs.getInt("card_no")));
                nameTf.setText(rs.getString("name"));
                
                addressTf.setText(rs.getString("address"));
                
                

                String dept = rs.getString("department");
                if (!dept.isEmpty()) {
                    departmentCombo.setSelectedItem(dept);
                } else {
                    departmentCombo.setSelectedIndex(0);
                }

                String deg = rs.getString("designation");
                if (!deg.isEmpty()) {
                    designationCombo.setSelectedItem(deg);
                } else {
                    designationCombo.setSelectedIndex(0);
                }

                            

                String gen = rs.getString("gender");

                if (gen.equals("Male") || gen.equals("male")) {
                    maleRadio.setSelected(true);
                } else if (gen.equals("Female") || gen.equals("female")) {
                    femaleRadio.setSelected(true);
                }

               dailyBasicTf.setText(String.valueOf(rs.getInt("d_basic")));
                

                java.sql.Date jDate = rs.getDate("joinning_date");
                if (jDate != null) {
                    joinningDateDc.setDate(jDate);
                } else {
                    joinningDateDc.setCalendar(null);
                }
                                         
               
            } else {
                System.err.println(rs.getString(tableClicked));
            }

            st.close();
            rs.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
          }

    private void updateEmployee() {
        getData();
        
        try {
            String sql_1 = "select * from employee where card_no='" + cardNo + "' ";
            PreparedStatement st = connection.prepareStatement(sql_1);
            ResultSet rs = st.executeQuery();
            if (rs.next()) {

                String sql_2 = "update employee set name = '" + name + "',"
                        + "address = '" + address + "',"
                        + "phone = '" + phone + "',"
                        + "gender = '" + gender + "',"
                        + "department = '" + department + "',"
                        + "designation = '" + designation + "',"
                        + "d_basic = '" + dailyBasic + "',"
                        + "hr_deductiom = '" + hrDeduction + "',"
                        + "joinning_date = '" + joinningDate + "' "
                        + "where card_no='"+cardNo+"'";
                        
                PreparedStatement statement_2 = connection.prepareStatement(sql_2);
                statement_2.executeUpdate();
                statement_2.close();
                }
            st.close();
            rs.close();
        } catch (SQLException e) {
        }
        showEmployeeTable();
    }

    private void setSelectData(String key) throws ParseException {
        
        

        try {

            String sql = "select * from employee where card_no='" + key + "'";
            PreparedStatement st = connection.prepareStatement(sql);
            ResultSet rs = st.executeQuery();

            if (rs.next()) {
                cardNoTf.setText(String.valueOf(rs.getInt("card_no")));
                nameTf.setText(rs.getString("name"));
                phoneTf.setText(rs.getString("phone"));
                addressTf.setText(rs.getString("address"));
                dailyBasicTf.setText(String.valueOf(rs.getDouble("d_basic")));
                double hrded=rs.getDouble("hr_deductiom");
                
                if(hrded>0){
                    hrDedCB.setSelected(true);
                    hrTF.setEnabled(true);
                    hrTF.setText(String.valueOf(hrded));
                    hrTF.setEnabled(true);                    
                }else{
                    hrDedCB.setSelected(false);
                    hrTF.setEnabled(false);
                    hrTF.setText("10");
                    hrTF.setEnabled(false);  
                }
                
                String c_department = rs.getString("department");
                if (!c_department.isEmpty()) {
                    departmentCombo.setSelectedItem(c_department);
                } else {
                    departmentCombo.setSelectedIndex(0);
                }

                String c_designation = rs.getString("designation");
                if (!c_designation.isEmpty()) {
                    designationCombo.setSelectedItem(c_designation);
                } else {
                    designationCombo.setSelectedIndex(0);
                }

                
                
                String c_gender = rs.getString("gender");

                if (c_gender.equals("Male") || c_gender.equals("male")) {
                    maleRadio.setSelected(true);
                } else if (c_gender.equals("Female") || c_gender.equals("female")) {
                    femaleRadio.setSelected(true);
                }



                String c_joinningDate = rs.getString("joinning_date");
                if (c_joinningDate != null) {
                    
                    Date date=dateFormat.parse(c_joinningDate);
                    joinningDateDc.setDate(date);
                } else {
                    joinningDateDc.setCalendar(null);
                }
               

               
            } else {
                System.err.println(rs.getString(key));
            }

            st.close();
            rs.close();
        } catch (SQLException e) {
            System.err.println(e);
        }
        }

    private void deleteEmployee() {
        getData();
        try{
            String sql="delete from employee where card_no ='"+cardNo+"'";
            try (PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.executeUpdate();
                
                statement.close();
                initFields();
                showEmployeeTable();
            }
        }
        catch(SQLException e){
            e.printStackTrace();
            
        }
    }

    
      

}
